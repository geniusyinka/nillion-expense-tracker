import { Did as Did$1, Keypair, NilauthClient, NucTokenEnvelope, SubscriptionStatusResponse, Command } from '@nillion/nuc';
import { SecretKey, ClusterKey } from '@nillion/blindfold';
import { z } from 'zod/v4';

/**
 *
 */
declare const Uuid: z.core.$ZodBranded<z.ZodUUID, "Uuid">;
type Uuid = z.infer<typeof Uuid>;
/**
 *
 */
declare const Did: z.core.$ZodBranded<z.ZodString, "Did">;
type Did = z.infer<typeof Did>;
/**
 *
 */
type ByNodeName<T> = Record<Did, T>;

/**
 * Node information response.
 */
declare const ReadAboutNodeResponse: z.ZodObject<{
    started: z.ZodISODateTime;
    build: z.ZodObject<{
        time: z.ZodISODateTime;
        commit: z.ZodString;
        version: z.ZodString;
    }, z.core.$strip>;
    public_key: z.ZodString;
    url: z.ZodString;
    maintenance: z.ZodObject<{
        active: z.ZodBoolean;
        started_at: z.ZodISODateTime;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadAboutNodeResponse = z.infer<typeof ReadAboutNodeResponse>;
/**
 *
 */
declare const NodeHealthCheckResponse: z.ZodLiteral<"OK">;
type NodeHealthCheckResponse = z.infer<typeof NodeHealthCheckResponse>;

declare const NilDbBaseClientOptions: z.ZodObject<{
    about: z.ZodObject<{
        started: z.ZodISODateTime;
        build: z.ZodObject<{
            time: z.ZodISODateTime;
            commit: z.ZodString;
            version: z.ZodString;
        }, z.core.$strip>;
        public_key: z.ZodString;
        url: z.ZodString;
        maintenance: z.ZodObject<{
            active: z.ZodBoolean;
            started_at: z.ZodISODateTime;
        }, z.core.$strip>;
    }, z.core.$strip>;
    baseUrl: z.ZodString;
}, z.core.$strip>;
type NilDbBaseClientOptions = z.infer<typeof NilDbBaseClientOptions>;
declare class NilDbBaseClient {
    #private;
    constructor(options: NilDbBaseClientOptions);
    get name(): string;
    get id(): Did$1;
    /**
     * Handles error responses with consistent error information
     */
    private handleErrorResponse;
    /**
     * Makes an authenticated request to the NilDb API
     */
    request<TSuccess>(options: {
        path: string;
        token?: string;
        method?: "GET" | "POST" | "DELETE";
        body?: Record<string, unknown>;
        responseSchema: z.Schema<TSuccess, any, any>;
    }): Promise<TSuccess>;
    /**
     * Retrieves comprehensive node information including version and configuration
     */
    aboutNode(): Promise<ReadAboutNodeResponse>;
    /**
     * Checks node health status
     */
    healthCheck(): Promise<"OK">;
}

/**
 * Common constructor options for all SecretVault clients.
 */
type SecretVaultBaseOptions<TClient extends NilDbBaseClient> = {
    keypair: Keypair;
    clients: TClient[];
    key?: SecretKey | ClusterKey;
};
/**
 * Provides common properties and methods for SecretVault clients.
 */
declare class SecretVaultBaseClient<TClient extends NilDbBaseClient> {
    protected _options: SecretVaultBaseOptions<TClient>;
    constructor(options: SecretVaultBaseOptions<TClient>);
    get id(): string;
    /**
     * The DID of the keypair associated with this client.
     */
    get did(): Did$1;
    /**
     * The array of underlying node clients for the cluster.
     */
    get nodes(): TClient[];
    /**
     * The keypair used by this client for signing.
     */
    get keypair(): Keypair;
    /**
     * Retrieves information about each node in the cluster.
     */
    readClusterInfo(): Promise<ByNodeName<ReadAboutNodeResponse>>;
}

/**
 * Defines valid configurations for creating or using a Blindfold encryption key.
 */
type BlindfoldFactoryConfig = {
    key: SecretKey | ClusterKey;
    operation?: never;
    seed?: never;
    useClusterKey?: never;
    threshold?: never;
} | {
    operation: "store" | "match";
    seed?: Uint8Array | Buffer | string;
    useClusterKey?: never;
    threshold?: never;
} | {
    operation: "sum";
    seed?: Uint8Array | Buffer | string;
    useClusterKey?: never;
    threshold?: number;
} | {
    operation: "store" | "match";
    seed?: never;
    useClusterKey: true;
    threshold?: never;
} | {
    operation: "sum";
    seed?: never;
    useClusterKey: true;
    threshold?: number;
};

/**
 * Builder registration request.
 */
declare const RegisterBuilderRequest: z.ZodObject<{
    did: z.core.$ZodBranded<z.ZodString, "Did">;
    name: z.ZodString;
}, z.core.$strip>;
type RegisterBuilderRequest = z.infer<typeof RegisterBuilderRequest>;
/**
 * Builder registration response.
 */
declare const RegisterBuilderResponse: z.ZodString;
type RegisterBuilderResponse = z.infer<typeof RegisterBuilderResponse>;
/**
 * Profile retrieval response.
 */
declare const ReadBuilderProfileResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.core.$ZodBranded<z.ZodString, "Did">;
        _created: z.ZodISODateTime;
        _updated: z.ZodISODateTime;
        name: z.ZodString;
        collections: z.ZodArray<z.ZodUUID>;
        queries: z.ZodArray<z.ZodUUID>;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadBuilderProfileResponse = z.infer<typeof ReadBuilderProfileResponse>;
/**
 * Builder deletion response.
 */
declare const DeleteBuilderResponse: z.ZodString;
type DeleteBuilderResponse = z.infer<typeof DeleteBuilderResponse>;
/**
 * Profile update request.
 */
declare const UpdateBuilderProfileRequest: z.ZodObject<{
    name: z.ZodString;
}, z.core.$strip>;
type UpdateBuilderProfileRequest = z.infer<typeof UpdateBuilderProfileRequest>;
/**
 * Profile update response.
 */
declare const UpdateBuilderProfileResponse: z.ZodString;
type UpdateBuilderProfileResponse = z.infer<typeof UpdateBuilderProfileResponse>;

/**
 * Collection document data.
 */
declare const CollectionDocumentDto: z.ZodObject<{
    owner: z.core.$ZodBranded<z.ZodString, "Did">;
    type: z.ZodEnum<{
        standard: "standard";
        owned: "owned";
    }>;
    name: z.ZodString;
    schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
/**
 * Collection documents array.
 */
declare const CollectionDocuments: z.ZodArray<z.ZodObject<{
    owner: z.core.$ZodBranded<z.ZodString, "Did">;
    type: z.ZodEnum<{
        standard: "standard";
        owned: "owned";
    }>;
    name: z.ZodString;
    schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>>;
/**
 * Collections list response.
 */
declare const ListCollectionsResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        owner: z.core.$ZodBranded<z.ZodString, "Did">;
        type: z.ZodEnum<{
            standard: "standard";
            owned: "owned";
        }>;
        name: z.ZodString;
        schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.core.$strip>>;
}, z.core.$strip>;
type ListCollectionsResponse = z.infer<typeof ListCollectionsResponse>;
/**
 * Collection index creation request.
 */
declare const CreateCollectionIndexRequest: z.ZodObject<{
    collection: z.ZodUUID;
    name: z.ZodString;
    keys: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodLiteral<1>, z.ZodLiteral<-1>]>>>;
    unique: z.ZodBoolean;
    ttl: z.ZodOptional<z.ZodNumber>;
}, z.core.$strip>;
type CreateCollectionIndexRequest = z.infer<typeof CreateCollectionIndexRequest>;
/**
 * Collection index creation response.
 */
declare const CreateCollectionIndexResponse: z.ZodString;
type CreateCollectionIndexResponse = z.infer<typeof CreateCollectionIndexResponse>;
/**
 * Drop collection index parameters.
 */
declare const DropCollectionIndexParams: z.ZodObject<{
    id: z.ZodUUID;
    name: z.ZodString;
}, z.core.$strip>;
type DropCollectionIndexParams = z.infer<typeof DropCollectionIndexParams>;
/**
 * Drop collection index response.
 */
declare const DropCollectionIndexResponse: z.ZodString;
type DropCollectionIndexResponse = z.infer<typeof DropCollectionIndexResponse>;
/**
 * Collection creation request.
 */
declare const CreateCollectionRequest: z.ZodObject<{
    _id: z.ZodUUID;
    type: z.ZodUnion<readonly [z.ZodLiteral<"standard">, z.ZodLiteral<"owned">]>;
    name: z.ZodString;
    schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type CreateCollectionRequest = z.infer<typeof CreateCollectionRequest>;
/**
 * Collection creation response.
 */
declare const CreateCollectionResponse: z.ZodString;
type CreateCollectionResponse = z.infer<typeof CreateCollectionResponse>;
/**
 * Collection deletion parameters.
 */
declare const DeleteCollectionRequestParams: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type DeleteCollectionRequestParams = z.infer<typeof DeleteCollectionRequestParams>;
/**
 * Collection deletion response.
 */
declare const DeleteCollectionResponse: z.ZodString;
type DeleteCollectionResponse = z.infer<typeof DeleteCollectionResponse>;
/**
 * Collection metadata read parameters.
 */
declare const ReadCollectionMetadataRequestParams: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type ReadCollectionMetadataRequestParams = z.infer<typeof ReadCollectionMetadataRequestParams>;
/**
 * Collection index data.
 */
declare const CollectionIndexDto: z.ZodObject<{
    v: z.ZodNumber;
    key: z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
    name: z.ZodString;
    unique: z.ZodBoolean;
}, z.core.$strip>;
/**
 * Collection metadata data.
 */
declare const CollectionMetadataDto: z.ZodObject<{
    _id: z.ZodUUID;
    count: z.ZodNumber;
    size: z.ZodNumber;
    first_write: z.ZodISODateTime;
    last_write: z.ZodISODateTime;
    indexes: z.ZodArray<z.ZodObject<{
        v: z.ZodNumber;
        key: z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
        name: z.ZodString;
        unique: z.ZodBoolean;
    }, z.core.$strip>>;
}, z.core.$strip>;
/**
 * Collection metadata response.
 */
declare const ReadCollectionMetadataResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.ZodUUID;
        count: z.ZodNumber;
        size: z.ZodNumber;
        first_write: z.ZodISODateTime;
        last_write: z.ZodISODateTime;
        indexes: z.ZodArray<z.ZodObject<{
            v: z.ZodNumber;
            key: z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
            name: z.ZodString;
            unique: z.ZodBoolean;
        }, z.core.$strip>>;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadCollectionMetadataResponse = z.infer<typeof ReadCollectionMetadataResponse>;

/**
 *
 */
declare const Name: z.ZodString;
type Name = z.infer<typeof Name>;
/**
 *
 */
declare const ApiSuccessResponse: <T extends z.ZodType>(Schema: T) => z.ZodObject<{
    data: T;
}, z.core.$strip>;
/**
 *
 */
declare const ApiErrorResponse: z.ZodObject<{
    ts: z.ZodISODateTime;
    errors: z.ZodArray<z.ZodString>;
}, z.core.$strip>;
type ApiErrorResponse = z.infer<typeof ApiErrorResponse>;
/**
 * Generic ID path parameter.
 */
declare const ByIdRequestParams: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type ByIdRequestParams = z.infer<typeof ByIdRequestParams>;
/**
 * Access control list entry.
 */
declare const Acl: z.ZodObject<{
    grantee: z.core.$ZodBranded<z.ZodString, "Did">;
    read: z.ZodBoolean;
    write: z.ZodBoolean;
    execute: z.ZodBoolean;
}, z.core.$strip>;
type Acl = z.infer<typeof Acl>;

/**
 * Owned data creation request.
 */
declare const CreateOwnedDataRequest: z.ZodObject<{
    owner: z.core.$ZodBranded<z.ZodString, "Did">;
    collection: z.ZodUUID;
    data: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    acl: z.ZodObject<{
        grantee: z.core.$ZodBranded<z.ZodString, "Did">;
        read: z.ZodBoolean;
        write: z.ZodBoolean;
        execute: z.ZodBoolean;
    }, z.core.$strip>;
}, z.core.$strip>;
type CreateOwnedDataRequest = z.infer<typeof CreateOwnedDataRequest>;
/**
 * Standard data creation request.
 */
declare const CreateStandardDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
    data: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
type CreateStandardDataRequest = z.infer<typeof CreateStandardDataRequest>;
/**
 * Data creation response.
 */
declare const CreateDataResponse: z.ZodObject<{
    data: z.ZodObject<{
        created: z.ZodArray<z.ZodUUID>;
        errors: z.ZodArray<z.ZodObject<{
            error: z.ZodString;
            document: z.ZodUnknown;
        }, z.core.$strip>>;
    }, z.core.$strip>;
}, z.core.$strip>;
type CreateDataResponse = z.infer<typeof CreateDataResponse>;
/**
 * Data update request.
 */
declare const UpdateDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
    filter: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    update: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type UpdateDataRequest = z.infer<typeof UpdateDataRequest>;
/**
 * Data update response.
 */
declare const UpdateDataResponse: z.ZodObject<{
    data: z.ZodObject<{
        acknowledged: z.ZodBoolean;
        matched: z.ZodNumber;
        modified: z.ZodNumber;
        upserted: z.ZodNumber;
        upserted_id: z.ZodNullable<z.ZodString>;
    }, z.core.$strip>;
}, z.core.$strip>;
type UpdateDataResponse = z.infer<typeof UpdateDataResponse>;
/**
 * Data find request.
 */
declare const FindDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
    filter: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type FindDataRequest = z.infer<typeof FindDataRequest>;
/**
 * Data find response.
 */
declare const FindDataResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
type FindDataResponse = z.infer<typeof FindDataResponse>;
/**
 * Data deletion request.
 */
declare const DeleteDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
    filter: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type DeleteDataRequest = z.infer<typeof DeleteDataRequest>;
/**
 * Data deletion response.
 */
declare const DeleteDataResponse: z.ZodObject<{
    data: z.ZodObject<{
        acknowledged: z.ZodBoolean;
        deletedCount: z.ZodNumber;
    }, z.core.$strip>;
}, z.core.$strip>;
type DeleteDataResponse = z.infer<typeof DeleteDataResponse>;
/**
 * Data flush request.
 */
declare const FlushDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
}, z.core.$strip>;
type FlushDataRequest = z.infer<typeof FlushDataRequest>;
/**
 * Data flush response.
 */
declare const FlushDataResponse: z.ZodString;
type FlushDataResponse = z.infer<typeof FlushDataResponse>;
/**
 * Data drop response.
 */
declare const DropDataResponse: z.ZodObject<{
    data: z.ZodObject<{
        acknowledged: z.ZodBoolean;
        deletedCount: z.ZodNumber;
    }, z.core.$strip>;
}, z.core.$strip>;
type DropDataResponse = z.infer<typeof DropDataResponse>;
/**
 * Data collection ID parameters.
 */
declare const DataSchemaByIdRequestParams: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type DataSchemaByIdRequestParams = z.infer<typeof DataSchemaByIdRequestParams>;
/**
 * Data tail request parameters.
 */
declare const TailDataRequestParams: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type TailDataRequestParams = z.infer<typeof TailDataRequestParams>;
/**
 * Data tail query parameters.
 */
declare const TailDataRequestQuery: z.ZodObject<{
    limit: z.ZodDefault<z.ZodOptional<z.ZodCoercedNumber<unknown>>>;
}, z.core.$strip>;
type TailDataRequestQuery = z.infer<typeof TailDataRequestQuery>;
/**
 * Data tail response.
 */
declare const TailDataResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
type TailDataResponse = z.infer<typeof TailDataResponse>;

/**
 * Query variable configuration validator.
 */
declare const QueryVariableValidator: z.ZodObject<{
    path: z.ZodPipe<z.ZodPipe<z.ZodString, z.ZodTransform<RegExpExecArray | null, string>>, z.ZodTransform<string, RegExpExecArray | null>>;
    description: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * Query creation request.
 */
declare const CreateQueryRequest: z.ZodObject<{
    _id: z.ZodUUID;
    name: z.ZodString;
    collection: z.ZodUUID;
    variables: z.ZodRecord<z.ZodString, z.ZodObject<{
        path: z.ZodPipe<z.ZodPipe<z.ZodString, z.ZodTransform<RegExpExecArray | null, string>>, z.ZodTransform<string, RegExpExecArray | null>>;
        description: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
    pipeline: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
type CreateQueryRequest = z.infer<typeof CreateQueryRequest>;
/**
 * Query creation response.
 */
declare const CreateQueryResponse: z.ZodString;
type CreateQueryResponse = z.infer<typeof CreateQueryResponse>;
/**
 * Queries list response.
 */
declare const ReadQueriesResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        _id: z.ZodUUID;
        _created: z.ZodISODateTime;
        _updated: z.ZodISODateTime;
        owner: z.core.$ZodBranded<z.ZodString, "Did">;
        name: z.ZodString;
        collection: z.ZodUUID;
        variables: z.ZodRecord<z.ZodString, z.ZodObject<{
            path: z.ZodPipe<z.ZodPipe<z.ZodString, z.ZodTransform<RegExpExecArray | null, string>>, z.ZodTransform<string, RegExpExecArray | null>>;
            description: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        pipeline: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
type ReadQueriesResponse = z.infer<typeof ReadQueriesResponse>;
/**
 * Read query response.
 */
declare const ReadQueryResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.ZodUUID;
        _created: z.ZodISODateTime;
        _updated: z.ZodISODateTime;
        owner: z.core.$ZodBranded<z.ZodString, "Did">;
        name: z.ZodString;
        collection: z.ZodUUID;
        variables: z.ZodRecord<z.ZodString, z.ZodObject<{
            path: z.ZodPipe<z.ZodPipe<z.ZodString, z.ZodTransform<RegExpExecArray | null, string>>, z.ZodTransform<string, RegExpExecArray | null>>;
            description: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        pipeline: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadQueryResponse = z.infer<typeof ReadQueryResponse>;
/**
 * Query deletion request.
 */
declare const DeleteQueryRequest: z.ZodObject<{
    id: z.ZodUUID;
}, z.core.$strip>;
type DeleteQueryRequest = z.infer<typeof DeleteQueryRequest>;
/**
 * Query deletion response.
 */
declare const DeleteQueryResponse: z.ZodString;
type DeleteQueryResponse = z.infer<typeof DeleteQueryResponse>;
/**
 * Query execution request.
 */
declare const RunQueryRequest: z.ZodObject<{
    _id: z.ZodUUID;
    variables: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type RunQueryRequest = z.infer<typeof RunQueryRequest>;
/**
 * Query execution response.
 */
declare const RunQueryResponse: z.ZodObject<{
    data: z.ZodUUID;
}, z.core.$strip>;
type RunQueryResponse = z.infer<typeof RunQueryResponse>;
/**
 * Query execution status.
 */
declare const RunQueryResultStatus: z.ZodEnum<{
    error: "error";
    pending: "pending";
    running: "running";
    complete: "complete";
}>;
type RunQueryResultStatus = z.infer<typeof RunQueryResultStatus>;
declare const ReadQueryRunByIdResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.ZodUUID;
        query: z.ZodUUID;
        status: z.ZodEnum<{
            error: "error";
            pending: "pending";
            running: "running";
            complete: "complete";
        }>;
        started: z.ZodOptional<z.ZodISODateTime>;
        completed: z.ZodOptional<z.ZodISODateTime>;
        result: z.ZodOptional<z.ZodUnknown>;
        errors: z.ZodOptional<z.ZodArray<z.ZodString>>;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadQueryRunByIdResponse = z.infer<typeof ReadQueryRunByIdResponse>;

declare const NilDbBuilderClientOptions: z.ZodObject<{
    about: z.ZodObject<{
        started: z.ZodISODateTime;
        build: z.ZodObject<{
            time: z.ZodISODateTime;
            commit: z.ZodString;
            version: z.ZodString;
        }, z.core.$strip>;
        public_key: z.ZodString;
        url: z.ZodString;
        maintenance: z.ZodObject<{
            active: z.ZodBoolean;
            started_at: z.ZodISODateTime;
        }, z.core.$strip>;
    }, z.core.$strip>;
    baseUrl: z.ZodString;
}, z.core.$strip>;
type NilDbBuilderClientOptions = z.infer<typeof NilDbBuilderClientOptions>;
/**
 *
 */
declare class NilDbBuilderClient extends NilDbBaseClient {
    #private;
    constructor(options: NilDbBuilderClientOptions);
    /**
     * Registers a new builder.
     */
    register(body: RegisterBuilderRequest): Promise<RegisterBuilderResponse>;
    /**
     * Retrieves the authenticated builder's profile information.
     */
    readProfile(token: string): Promise<ReadBuilderProfileResponse>;
    /**
     * Updates the authenticated builder's profile information.
     */
    updateProfile(token: string, body: UpdateBuilderProfileRequest): Promise<UpdateBuilderProfileResponse>;
    /**
     * Deletes the authenticated builder and all associated resources.
     */
    deleteBuilder(token: string): Promise<DeleteBuilderResponse>;
    /**
     * Creates a new collection for data validation.
     */
    createCollection(token: string, body: CreateCollectionRequest): Promise<CreateCollectionResponse>;
    /**
     * Lists all collections owned by the authenticated builder.
     */
    readCollections(token: string): Promise<ListCollectionsResponse>;
    /**
     * Deletes a collection by id and all associated data.
     */
    deleteCollection(token: string, collection: Uuid): Promise<DeleteCollectionResponse>;
    /**
     * Retrieves a collection by id including metadata.
     */
    readCollection(token: string, collection: Uuid): Promise<ReadCollectionMetadataResponse>;
    /**
     * Creates an index on a collection.
     */
    createCollectionIndex(token: string, collection: Uuid, body: CreateCollectionIndexRequest): Promise<CreateCollectionIndexResponse>;
    /**
     * Drops an index from a collection.
     */
    dropCollectionIndex(token: string, collection: Uuid, index: Name): Promise<DropCollectionIndexResponse>;
    /**
     * Lists all queries owned by the authenticated builder.
     */
    getQueries(token: string): Promise<ReadQueriesResponse>;
    /**
     * Retrieves a query by id.
     */
    getQuery(token: string, query: Uuid): Promise<ReadQueryResponse>;
    /**
     * Creates a new MongoDB aggregation query with variable substitution.
     */
    createQuery(token: string, body: CreateQueryRequest): Promise<CreateQueryResponse>;
    /**
     * Deletes a query by id.
     */
    deleteQuery(token: string, query: Uuid): Promise<DeleteQueryResponse>;
    /**
     * Executes a query with variable substitution.
     */
    runQuery(token: string, body: RunQueryRequest): Promise<RunQueryResponse>;
    /**
     * Retrieves the status and results of a background query job.
     */
    readQueryRunResults(token: string, run: Uuid): Promise<ReadQueryRunByIdResponse>;
    /**
     * Uploads standard data records to a schema-validated collection.
     */
    createStandardData(token: string, body: CreateStandardDataRequest): Promise<CreateDataResponse>;
    /**
     * Searches for data matching the provided filter.
     */
    findData(token: string, body: FindDataRequest): Promise<FindDataResponse>;
    /**
     * Updates data records matching the provided filter.
     */
    updateData(token: string, body: UpdateDataRequest): Promise<UpdateDataResponse>;
    /**
     * Deletes data records matching the provided filter.
     */
    deleteData(token: string, body: DeleteDataRequest): Promise<DeleteDataResponse>;
    /**
     * Removes all data from a collection.
     */
    flushData(token: string, collection: Uuid): Promise<FlushDataResponse>;
    /**
     * Retrieves the most recent data records from a collection.
     */
    tailData(token: string, collection: Uuid, limit?: number): Promise<TailDataResponse>;
}

/**
 *
 */
type SecretVaultBuilderOptions = SecretVaultBaseOptions<NilDbBuilderClient> & {
    nilauthClient: NilauthClient;
};
/**
 * Client for builders to manage their SecretVaults with automatic handling of concealed data if configured.
 */
declare class SecretVaultBuilderClient extends SecretVaultBaseClient<NilDbBuilderClient> {
    #private;
    /**
     * Creates and initializes a new SecretVaultBuilderClient instance.
     */
    static from(options: {
        keypair: Keypair;
        urls: {
            chain: string;
            auth: string;
            dbs: string[];
        };
        blindfold?: BlindfoldFactoryConfig;
    }): Promise<SecretVaultBuilderClient>;
    constructor(options: SecretVaultBuilderOptions);
    get rootToken(): NucTokenEnvelope;
    /**
     * Fetches a new root NUC token from the configured nilAuth server.
     */
    refreshRootToken(): Promise<void>;
    /**
     * Checks subscription status by the builder's Did.
     */
    subscriptionStatus(): Promise<SubscriptionStatusResponse>;
    /**
     * Registers the builder with all nodes in the cluster.
     */
    register(body: RegisterBuilderRequest): Promise<ByNodeName<RegisterBuilderResponse>>;
    /**
     * Reads the builder's profile from the cluster.
     */
    readProfile(): Promise<ReadBuilderProfileResponse>;
    /**
     * Updates the builder's profile on all nodes.
     */
    updateBuilderProfile(body: UpdateBuilderProfileRequest): Promise<ByNodeName<UpdateBuilderProfileResponse>>;
    /**
     * Deletes the builder and associated resources from all nodes.
     */
    deleteBuilder(): Promise<ByNodeName<DeleteBuilderResponse>>;
    /**
     * Creates a new collection on all nodes.
     */
    createCollection(body: CreateCollectionRequest): Promise<ByNodeName<CreateCollectionResponse>>;
    /**
     * Reads a list of all collections from the cluster.
     */
    readCollections(): Promise<ListCollectionsResponse>;
    /**
     * Reads the metadata for a single collection.
     */
    readCollection(collection: Uuid): Promise<ReadCollectionMetadataResponse>;
    /**
     * Deletes a collection its data from all nodes.
     */
    deleteCollection(collection: Uuid): Promise<ByNodeName<DeleteCollectionResponse>>;
    /**
     * Creates a new index on a collection.
     */
    createCollectionIndex(collection: Uuid, body: CreateCollectionIndexRequest): Promise<ByNodeName<CreateCollectionIndexResponse>>;
    /**
     * Drops an index from a collection.
     */
    dropCollectionIndex(collection: Uuid, index: Name): Promise<ByNodeName<DropCollectionIndexResponse>>;
    /**
     * Creates one or more standard data documents in a collection.
     */
    createStandardData(options: {
        body: CreateStandardDataRequest;
        delegation?: string;
    }): Promise<ByNodeName<CreateDataResponse>>;
    /**
     * Retrieves a list of all saved queries.
     */
    getQueries(): Promise<ByNodeName<ReadQueriesResponse>>;
    /**
     * Retrieves a single saved query by its id.
     */
    getQuery(query: Uuid): Promise<ByNodeName<ReadQueryResponse>>;
    /**
     * Creates a new saved query on all nodes.
     */
    createQuery(body: CreateQueryRequest): Promise<ByNodeName<CreateQueryResponse>>;
    /**
     * Deletes a saved query from all nodes.
     */
    deleteQuery(query: Uuid): Promise<ByNodeName<DeleteQueryResponse>>;
    /**
     * Starts a query execution job.
     */
    runQuery(body: RunQueryRequest): Promise<ByNodeName<RunQueryResponse>>;
    /**
     * Reads the results of a completed query run from each node.
     */
    readQueryRunResults(runs: ByNodeName<Uuid>): Promise<ByNodeName<ReadQueryRunByIdResponse>>;
    /**
     * Finds data in a collection, revealing concealed values if a key is configured.
     */
    findData(body: FindDataRequest): Promise<FindDataResponse>;
    /**
     * Updates documents in a collection, concealing the update payload if a key is configured.
     */
    updateData(body: UpdateDataRequest): Promise<ByNodeName<UpdateDataResponse>>;
    /**
     * Deletes data from a collection based on a filter.
     */
    deleteData(body: DeleteDataRequest): Promise<ByNodeName<DeleteDataResponse>>;
    /**
     * Deletes all data from a collection.
     */
    flushData(collection: Uuid): Promise<ByNodeName<FlushDataResponse>>;
    /**
     * Reads the last N documents from a collection, revealing concealed values if a key is configured.
     */
    tailData(collection: Uuid, limit?: number): Promise<TailDataResponse>;
    private mintRootInvocation;
}

declare const NucCmd: {
    readonly nil: {
        readonly db: {
            readonly root: Command;
            readonly system: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
            readonly builders: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
            readonly data: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
            readonly collections: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
            readonly queries: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
            readonly users: {
                root: Command;
                create: Command;
                read: Command;
                update: Command;
                delete: Command;
                execute: Command;
            };
        };
    };
};

/**
 * Access control list entry.
 */
declare const AclDto: z.ZodObject<{
    grantee: z.core.$ZodBranded<z.ZodString, "Did">;
    read: z.ZodBoolean;
    write: z.ZodBoolean;
    execute: z.ZodBoolean;
}, z.core.$strip>;
type AclDto = z.infer<typeof AclDto>;
/**
 * User profile response.
 */
declare const ReadUserProfileResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.core.$ZodBranded<z.ZodString, "Did">;
        _created: z.ZodISODateTime;
        _updated: z.ZodISODateTime;
        logs: z.ZodArray<z.ZodObject<{
            op: z.ZodString;
            collection: z.ZodUUID;
            acl: z.ZodOptional<z.ZodObject<{
                grantee: z.core.$ZodBranded<z.ZodString, "Did">;
                read: z.ZodBoolean;
                write: z.ZodBoolean;
                execute: z.ZodBoolean;
            }, z.core.$strip>>;
        }, z.core.$loose>>;
        data: z.ZodArray<z.ZodObject<{
            collection: z.ZodUUID;
            id: z.ZodUUID;
        }, z.core.$strip>>;
    }, z.core.$strip>;
}, z.core.$strip>;
type ReadUserProfileResponse = z.infer<typeof ReadUserProfileResponse>;
/**
 * Data read request parameters.
 */
declare const ReadDataRequestParams: z.ZodObject<{
    collection: z.ZodUUID;
    document: z.ZodUUID;
}, z.core.$strip>;
type ReadDataRequestParams = z.infer<typeof ReadDataRequestParams>;
declare const ReadDataResponse: z.ZodObject<{
    data: z.ZodObject<{
        _id: z.ZodUUID;
        _created: z.ZodISODateTime;
        _updated: z.ZodISODateTime;
        _owner: z.core.$ZodBranded<z.ZodString, "Did">;
        _acl: z.ZodArray<z.ZodObject<{
            grantee: z.core.$ZodBranded<z.ZodString, "Did">;
            read: z.ZodBoolean;
            write: z.ZodBoolean;
            execute: z.ZodBoolean;
        }, z.core.$strip>>;
    }, z.core.$loose>;
}, z.core.$strip>;
type ReadDataResponse = z.infer<typeof ReadDataResponse>;
/**
 * User data references response.
 */
declare const ListDataReferencesResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        builder: z.core.$ZodBranded<z.ZodString, "Did">;
        collection: z.ZodUUID;
        document: z.ZodUUID;
    }, z.core.$strip>>;
}, z.core.$strip>;
type ListDataReferencesResponse = z.infer<typeof ListDataReferencesResponse>;
/**
 * Data ACL read parameters.
 */
declare const ReadDataAclRequestParams: z.ZodObject<{
    collection: z.ZodUUID;
    document: z.ZodUUID;
}, z.core.$strip>;
type ReadDataAclRequestParams = z.infer<typeof ReadDataAclRequestParams>;
/**
 * Data access response.
 */
declare const ReadDataAccessResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        grantee: z.core.$ZodBranded<z.ZodString, "Did">;
        read: z.ZodBoolean;
        write: z.ZodBoolean;
        execute: z.ZodBoolean;
    }, z.core.$strip>>;
}, z.core.$strip>;
type ReadDataAccessResponse = z.infer<typeof ReadDataAccessResponse>;
/**
 * Grant data access request.
 */
declare const GrantAccessToDataRequest: z.ZodObject<{
    collection: z.ZodUUID;
    document: z.ZodUUID;
    acl: z.ZodObject<{
        grantee: z.core.$ZodBranded<z.ZodString, "Did">;
        read: z.ZodBoolean;
        write: z.ZodBoolean;
        execute: z.ZodBoolean;
    }, z.core.$strip>;
}, z.core.$strip>;
type GrantAccessToDataRequest = z.infer<typeof GrantAccessToDataRequest>;
/**
 * Grant data access response.
 */
declare const GrantAccessToDataResponse: z.ZodString;
type GrantAccessToDataResponse = z.infer<typeof GrantAccessToDataResponse>;
/**
 * Revoke data access request.
 */
declare const RevokeAccessToDataRequest: z.ZodObject<{
    grantee: z.core.$ZodBranded<z.ZodString, "Did">;
    collection: z.ZodUUID;
    document: z.ZodUUID;
}, z.core.$strip>;
type RevokeAccessToDataRequest = z.infer<typeof RevokeAccessToDataRequest>;
/**
 * Revoke data access response.
 */
declare const RevokeAccessToDataResponse: z.ZodString;
type RevokeAccessToDataResponse = z.infer<typeof RevokeAccessToDataResponse>;
/**
 * Document deletion parameters.
 */
declare const DeleteDocumentRequestParams: z.ZodObject<{
    collection: z.ZodUUID;
    document: z.ZodUUID;
}, z.core.$strip>;
type DeleteDocumentRequestParams = z.infer<typeof DeleteDocumentRequestParams>;
/**
 * Document deletion response.
 */
declare const DeleteDocumentResponse: z.ZodString;
type DeleteDocumentResponse = z.infer<typeof DeleteDocumentResponse>;
/**
 * Update user data request.
 */
declare const UpdateUserDataRequest: z.ZodObject<{
    document: z.ZodUUID;
    collection: z.ZodUUID;
    update: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.core.$strip>;
type UpdateUserDataRequest = z.infer<typeof UpdateUserDataRequest>;

declare const NilDbUserClientOptions: z.ZodObject<{
    about: z.ZodObject<{
        started: z.ZodISODateTime;
        build: z.ZodObject<{
            time: z.ZodISODateTime;
            commit: z.ZodString;
            version: z.ZodString;
        }, z.core.$strip>;
        public_key: z.ZodString;
        url: z.ZodString;
        maintenance: z.ZodObject<{
            active: z.ZodBoolean;
            started_at: z.ZodISODateTime;
        }, z.core.$strip>;
    }, z.core.$strip>;
    baseUrl: z.ZodString;
}, z.core.$strip>;
type NilDbUserClientOptions = z.infer<typeof NilDbUserClientOptions>;
declare class NilDbUserClient extends NilDbBaseClient {
    #private;
    constructor(options: NilDbUserClientOptions);
    /**
     * Retrieves the authenticated user's profile information.
     */
    readProfile(token: string): Promise<ReadUserProfileResponse>;
    /**
     * Lists all data records owned by the authenticated user.
     */
    listDataReferences(token: string): Promise<ListDataReferencesResponse>;
    /**
     * Create user-owned data in an owned collection
     */
    createOwnedData(token: string, body: CreateOwnedDataRequest): Promise<CreateDataResponse>;
    /**
     * Retrieves user-owned data by collection and document id.
     */
    readData(token: string, params: ReadDataRequestParams): Promise<ReadDataResponse>;
    /**
     * Deletes a user-owned data document.
     */
    deleteData(token: string, params: DeleteDocumentRequestParams): Promise<DeleteDocumentResponse>;
    /**
     * Grants access to user-owned data.
     */
    grantAccess(token: string, body: GrantAccessToDataRequest): Promise<GrantAccessToDataResponse>;
    /**
     * Removes access to user-owned data.
     */
    revokeAccess(token: string, body: RevokeAccessToDataRequest): Promise<RevokeAccessToDataResponse>;
}

type SecretVaultUserOptions = SecretVaultBaseOptions<NilDbUserClient>;
/**
 * Client for users to manage owned-documents in SecretVaults.
 */
declare class SecretVaultUserClient extends SecretVaultBaseClient<NilDbUserClient> {
    /**
     * Creates and initializes a new SecretVaultUserClient instance.
     */
    static from(options: {
        keypair: Keypair;
        baseUrls: string[];
        blindfold?: BlindfoldFactoryConfig;
    }): Promise<SecretVaultUserClient>;
    /**
     * Reads the user's profile information from the cluster.
     */
    readProfile(): Promise<ReadUserProfileResponse>;
    /**
     * Creates one or more data documents owned by the user.
     */
    createData(delegation: string, body: CreateOwnedDataRequest): Promise<ByNodeName<CreateDataResponse>>;
    /**
     * Lists references to all data documents owned by the user.
     */
    listDataReferences(): Promise<ListDataReferencesResponse>;
    /**
     * Reads a single data document, automatically revealing concealed values if a key is configured.
     */
    readData(params: ReadDataRequestParams): Promise<ReadDataResponse>;
    /**
     * Deletes a user-owned document from all nodes.
     */
    deleteData(params: DeleteDocumentRequestParams): Promise<ByNodeName<DeleteDocumentResponse>>;
    /**
     * Grants a given Did access to a given user-owned document.
     */
    grantAccess(body: GrantAccessToDataRequest): Promise<ByNodeName<GrantAccessToDataResponse>>;
    /**
     * Revokes access for a given Did to the specified user-owned document.
     */
    revokeAccess(body: RevokeAccessToDataRequest): Promise<ByNodeName<RevokeAccessToDataResponse>>;
    private mintInvocation;
}

export { Acl, AclDto, ApiErrorResponse, ApiSuccessResponse, ByIdRequestParams, type ByNodeName, CollectionDocumentDto, CollectionDocuments, CollectionIndexDto, CollectionMetadataDto, CreateCollectionIndexRequest, CreateCollectionIndexResponse, CreateCollectionRequest, CreateCollectionResponse, CreateDataResponse, CreateOwnedDataRequest, CreateQueryRequest, CreateQueryResponse, CreateStandardDataRequest, DataSchemaByIdRequestParams, DeleteBuilderResponse, DeleteCollectionRequestParams, DeleteCollectionResponse, DeleteDataRequest, DeleteDataResponse, DeleteDocumentRequestParams, DeleteDocumentResponse, DeleteQueryRequest, DeleteQueryResponse, Did, DropCollectionIndexParams, DropCollectionIndexResponse, DropDataResponse, FindDataRequest, FindDataResponse, FlushDataRequest, FlushDataResponse, GrantAccessToDataRequest, GrantAccessToDataResponse, ListCollectionsResponse, ListDataReferencesResponse, Name, NodeHealthCheckResponse, NucCmd, QueryVariableValidator, ReadAboutNodeResponse, ReadBuilderProfileResponse, ReadCollectionMetadataRequestParams, ReadCollectionMetadataResponse, ReadDataAccessResponse, ReadDataAclRequestParams, ReadDataRequestParams, ReadDataResponse, ReadQueriesResponse, ReadQueryResponse, ReadQueryRunByIdResponse, ReadUserProfileResponse, RegisterBuilderRequest, RegisterBuilderResponse, RevokeAccessToDataRequest, RevokeAccessToDataResponse, RunQueryRequest, RunQueryResponse, RunQueryResultStatus, SecretVaultBuilderClient, type SecretVaultBuilderOptions, SecretVaultUserClient, type SecretVaultUserOptions, TailDataRequestParams, TailDataRequestQuery, TailDataResponse, UpdateBuilderProfileRequest, UpdateBuilderProfileResponse, UpdateDataRequest, UpdateDataResponse, UpdateUserDataRequest, Uuid };
